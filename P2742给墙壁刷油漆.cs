using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleCore1
{
    // 2023/6/18 WC350-D 比赛现场没想出来T_T
    // DP+问题转化：问题变为买够免费工人时间的最小成本，并根据time进行DP
    // 16:10终于AC，总结如下：
    // （1）一开始想到0-1背包，但是c的范围高达10**6，实测method1确实超时
    // （2）有考虑过二分，但是无法建模
    // （3）最后根据入参范围思路锁定在time上，确定dp[i][t]: 前i个工作中买够t的最小花费
    // （4）mdthod2 WA，总结：1 t应该是至少买够t时间，也就是dp[t]=c时，dp[t-1], dp[t-2]...都是最大为c
    //                       2 直接把买了的那个工作本身算作t=1，因为买了以后免费工人就少做一个工作（少花1的时间）
    // （5）只有一个入参（1,1）时WA，初始时最大cost不应该是int.maxvalue，改为cost.Sum()
    // （6）还是WA（见special case）,发现除了if (j>=t)以外，else也要处理（直接等于c）
    // （7）提交N次之后终于通过，这题比赛时想了一个多小时，赛后想了四个小时，真不该花这么多时间！
    internal class P2742给墙壁刷油漆
    {
        // method 2 - modified
        // dp[i][t] = (i省略) 前i个，买到至少t时间的最小价钱
        // 留意自己本身也算一个，dp[8] = 5个人，10元, 应该是 dp[8+5]=10
        public int PaintWalls(int[] cost, int[] time)
        {
            int n = cost.Length, maxCost = cost.Sum();
            var dp = new int[n + 2];
            Array.Fill(dp, maxCost);
            dp[0] = 0;

            for (int i = 0; i < n; ++i)
            {
                int c = cost[i], t = time[i] + 1;
                for (int j = n; j >= 0; --j)
                {
                    dp[j] = Math.Min(dp[j], dp[j + 1]);
                    if (j >= t)
                    {
                        dp[j] = Math.Min(dp[j], dp[j - t] + c);
                    }
                    else
                    {
                        dp[j] = Math.Min(dp[j], c);
                    }
                }
            }
            return dp[n];
        }

        // method 2: another dp - but WA
        public int PaintWalls_2(int[] cost, int[] time)
        {
            int n = cost.Length, minCost = cost.Sum();
            var dp = new (int, int)[n + 1];
            Array.Fill(dp, (-1, 0));
            dp[0] = (0, 0);

            for (int i = 0; i < n; ++i)
            {
                int c = cost[i], t = time[i];
                for (int j = n; j >= t; --j)
                {
                    if (dp[j - t].Item1 >= 0)
                    {
                        (int c0, int n0) = dp[j - t];
                        if (dp[j].Item1 < 0 || c0 + c < dp[j].Item1 || c0 + c == dp[j].Item1 && n0 + 1 > dp[j].Item2)
                        {
                            dp[j] = (c0 + c, n0 + 1);
                            if (dp[j].Item1 < minCost && j >= n - n0 - 1)
                                minCost = dp[j].Item1;
                        }
                    }
                }
            }
            return minCost;
        }

        // method 1: actual running time quite short but still TLE
        public int PaintWalls_1(int[] cost, int[] time)
        {
            int n = cost.Length, minCost = cost.Sum();
            
            // dp[c] : with cost c, can buy maximum number of jobs and maximum total time
            SortedDictionary<int, (int, int)> dp = new();
            dp[0] = (0, 0);

            for (int i = 0; i < n; ++i)
            {
                int c = cost[i], t = time[i];
                var keyList = dp.Keys.Reverse().ToList();
                foreach (int dc in keyList)
                {
                    if (dc >= minCost)
                    {
                        dp.Remove(dc);
                        continue;
                    }
                    (int dt, int dn) = dp[dc];
                    int sn = dn + 1, st = dt + t, sc = dc + c;
                    if (sc < minCost && (!dp.ContainsKey(sc) || st > dp[sc].Item1 || st == dp[sc].Item1 && sn > dp[sc].Item2))
                    {
                        dp[sc] = (st, sn);
                        if (st >= n - sn)
                        {
                            minCost = sc;
                        }
                    }
                }
            }

            // DEBUG
            Console.WriteLine("dp size=" + dp.Count);

            return minCost;
        }

        internal static void Run()
        {
            /* input template
            string jd_cost = "",
                jd_time = "";
            */

            // input 1 - ans=3572
            //string jd_cost = "[1537,1955,1083,715,1011,1881,1296,1437,1446,427,498,1889,1628,1157,768,562,1878,1882,821,519,851,656,990,1948,402,1522,1667,1324,226,2002,1244,776,831,835,1119,365,572,1265,356,760,535,402,999,482,607]",
            //       jd_time = "[4,6,5,2,4,3,3,5,1,1,1,6,6,1,5,5,2,3,3,3,2,4,2,2,3,5,5,3,3,3,2,1,3,3,4,2,6,6,6,5,4,3,6,6,6]";            int[] cost = jd_cost.ToTestInput<int[]>(), time = jd_time.ToTestInput<int[]>();

            //input 2 - ans = 1221
            //string jd_cost = "[103,447,670,34,364,682,257,270,422,709,855,405,701,36,754,349,866,179,746,515,576,315,715,839,327,567,828,513,15,609]",
            //    jd_time = "[3,1,1,2,1,5,3,3,3,1,3,3,4,3,2,5,5,3,1,2,5,1,1,2,4,5,4,1,1,1]";

            // input 3 - ans=1314152  # 这个是真的慢了。。
            string jd_cost = "[41675,90161,42520,2465,108823,98591,49224,46555,131321,216747,7258,6299,169312,168482,130148,226209,197115,15146,55089,187926,78480,111029,149448,67732,54628,196939,25374,194820,14127,85198,97214,134385,56194,238827,35900,121819,208957,107083,238577,150903,126509,76669,60955,46842,158083,116031,32064,63773,120096,216182,153556,34298,145897,157373,78292,176632,159220,18749,224908,12650,232288,62610,5937,34619,99324,66938,213520,94116,133113,234093,202342,42557,170595,77540,40425,240793,136442,185747,19610,1279,126431,139526,140677,69081,119353,139199,55915,8350,107974,27172,180275,81994,162221,238364,218745,125032,110797,236061,125937,127927,186660,122670,132524,122477,126795,67347,48530,89577,125199,18530,214409,174298,74254,235,156489,209119,204785,175568,59549,82607,211991,153185,49666,129143,80511,33293,164404,229008,123974,226738,181846,62761,231278,79167,151166,187715,161615,207109,129906,167893,136182,42894,187370,39969,6743,9406,199895,16024,52868,119138,33884,170451,90106,23158,213806,193552,220162,223579,145187,72824,123924,103909,156478,105241,191831,125762,22026,213135,208691,139492,53292,216124,70708,1650,14223,146834,221897,2983,176816,142592,365,210600,92797,31105,140385,235568,16988,227990,87410,241067,229219,29455,235095,206722,33067,173429,173335,138607,195264,8718,180069,89331,82087,99767,210593,139259,230628,107238,69270,205825,222129,177425,233530,49351,55857,114637,80212,154839,152,12556,48684,18577,59045,242480,179325,165081,60876,170269,200253,13845,52579,209733,71088,223880,153760,107584,158823,68056,149410,112971,189975,229610,198299,116694,132896,236773,86703,230248,60016,16671,110518,165120,104334,111329,167568,58512,200481,105990,184663,158805,209591,159629,242966,217879,188151,36999,235805,3040,228087,145443,194727,227111,73716,60646,79701,77113,100063,122301,177805,115432,143504,105642,175829,223260,196590,209454,207756,15755,74830,184973,43249,4335,207433,83486,78888,172208,95841,237159,6382,170429,222212,153605,104335,207908,53476,151336,210360,49543,22342,232660,38247,178316,204946,99128,45026,102119,28955,119544,36304,98984,2378,224462,2305,158430,54224,67209,99644,175093,192855,63489,64096,215267,1162,219501,68560,216480,75965,18008,224154,59903,9444,75839,106329,20074,94729,183253,89182,218736,174058,216584,212835,173260,105726,184756,62870,94841,140979,30982,67675,84299,184896,163217,68378,227342,174141,138283,145291,216402,203876,109546,11123,37547,84335,207552,19054,146820,37754,124850,56560,85718,158882,138056,90513,17456,123409,9271,152276,56958,182559,177419,202995,211580,77668,208993,34950,168743,237430,146632,242385,94324,231793,104808,178101,19059,66441,19733,119659,95080,80720,138340,72267,182732,69323,32725,90967,148902,105132,64905,31616,185103,201046,40202,166635,226570,218536,140330,35,196762,211915,57942,139265,60002,200736,95740,160796,236401,114280,167988,26025,110206,13512,217865,52810,188783,103021,90155,30072,148118,132774,85351,217795,204933,53529,107626,41846,171335,142552,112932,208198,44216,6714,219388,142762,214524,59268,213010,213414,140124,83024,92851,143747,73179,219038,185261,100400,190972,46915,107024,83017,64933,185057,162001,208512,24871,21833,99141,93583,170977,118049,53297,111963,91506,23054]",
                jd_time = "[7,2,6,5,4,1,10,6,6,7,2,10,2,7,10,7,7,2,9,6,8,8,10,5,4,1,2,6,1,6,7,10,2,3,8,3,10,3,3,8,2,5,4,4,1,7,1,4,10,8,3,8,3,5,6,3,5,10,4,10,4,6,9,1,4,8,9,5,8,7,4,2,3,4,7,8,10,4,6,10,5,5,10,1,9,3,4,6,6,8,7,10,10,9,9,6,8,1,6,6,5,4,6,8,7,4,6,1,8,7,3,7,2,2,2,1,7,10,8,3,3,5,7,6,4,8,4,9,1,9,7,10,7,1,2,8,7,6,5,2,9,7,8,2,4,4,3,4,7,10,3,7,4,9,6,9,5,2,4,9,10,9,7,7,3,4,1,6,2,4,7,6,10,2,4,8,7,7,6,7,8,9,10,4,9,1,8,4,2,6,3,4,2,6,1,9,7,8,8,10,9,4,3,6,5,4,10,7,7,8,3,10,5,3,6,6,9,3,5,8,2,1,7,5,6,4,4,7,9,7,5,4,1,5,3,2,2,3,1,10,10,1,10,10,3,10,4,3,7,6,4,4,1,2,10,8,8,3,1,4,2,1,6,1,10,6,6,4,6,10,3,10,1,4,3,8,6,9,6,6,6,3,9,2,6,4,2,5,10,1,3,2,4,10,3,4,1,9,6,8,3,6,6,6,6,4,7,5,1,5,9,10,3,1,8,4,4,6,3,10,4,8,6,6,8,5,3,6,1,8,5,8,9,5,6,8,5,2,2,3,5,5,7,4,2,3,4,4,10,1,6,2,2,2,6,8,1,2,1,3,10,1,5,2,6,4,2,2,3,9,7,10,3,4,9,9,3,6,9,9,1,3,8,3,9,1,1,7,1,10,4,5,5,4,8,5,5,2,3,9,10,8,2,7,10,4,2,5,4,8,3,8,2,6,5,6,7,4,2,4,5,5,4,9,3,8,1,1,10,5,2,4,7,7,10,2,6,4,8,1,8,1,6,9,6,8,5,3,9,4,5,8,3,3,3,3,4,7,4,6,5,4,8,7,1,6,9,4,3,4,8,10,8,10,8,3,8,2,3,10,2,2,1,2,6,3,3,4,9,9,5,8,2]";

            int[] time = jd_time.ToTestInput<int[]>(), cost = jd_cost.ToTestInput<int[]>();
            var sln = new P2742给墙壁刷油漆();
            int ans = sln.PaintWalls(cost, time);
            Console.WriteLine("ans=" + ans);

            // special case
            time = new int[500];
            Array.Fill(time, 1);
            cost = new int[500];
            Array.Fill(cost, 1000000);
            time[^1] = 500;
            cost[^1] = 1;
            ans = sln.PaintWalls(cost, time);
            Console.WriteLine("ans(special)=" + ans);

        }
    }
}
